<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java中的自动装箱与拆箱</title>
      <link href="posts/1ca5350f.html"/>
      <url>posts/1ca5350f.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-什么是自动装箱拆箱"><a href="#一、-什么是自动装箱拆箱" class="headerlink" title="一、 什么是自动装箱拆箱"></a>一、 什么是自动装箱拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer total = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> totalprim = total;</span><br></pre></td></tr></table></figure><p>简单一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。</p><p>下面我们来看看需要装箱拆箱的类型有哪些：<br><img src="https://i.loli.net/2021/04/28/wUJGdbE7B5lzP8L.png" alt=""></p><div class="table-container"><table><thead><tr><th style="text-align:left">基本数据类型</th><th style="text-align:left">包装器类型</th></tr></thead><tbody><tr><td style="text-align:left">int（4字节）</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">short（2字节）</td><td style="text-align:left">Short</td></tr><tr><td style="text-align:left">long（8字节）</td><td style="text-align:left">Long</td></tr><tr><td style="text-align:left">float（4字节）</td><td style="text-align:left">Float</td></tr><tr><td style="text-align:left">double（8字节）</td><td style="text-align:left">Double</td></tr><tr><td style="text-align:left">char（2字节）</td><td style="text-align:left">Character</td></tr><tr><td style="text-align:left">boolean（未定）</td><td style="text-align:left">Boolean</td></tr></tbody></table></div><p>这个过程是自动执行的，那么我们需要看看它的执行过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//自动装箱</span></span><br><span class="line">  Integer total = <span class="number">99</span>;</span><br><span class="line">  <span class="comment">//自动拆箱</span></span><br><span class="line">  <span class="keyword">int</span> totlaprim = total;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>反编译class文件之后得到如下内容：<code>javap -c StringTest</code></p><p><img src="https://i.loli.net/2021/04/28/eCzXj3amIDrqbUB.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer total = <span class="number">99</span>;</span><br></pre></td></tr></table></figure><br>执行上面那句代码的时候，系统为我们执行了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer total = Integer.valueOf(<span class="number">99</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalprim = total;</span><br></pre></td></tr></table></figure><p>执行上面那句代码时，系统为我们执行了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalprim = total.intValue();</span><br></pre></td></tr></table></figure></p><p>我们现在就以Integer为例，来分析一下它的源码：</p><ol><li><p>首先来看看<code>Integer.valueOf</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(ini i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i &gt;= <span class="number">128</span> || i &lt; -<span class="number">128</span> ? <span class="keyword">new</span> Integer(i) : SMALL_VALUES[i + <span class="number">128</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会首先判断i的大小：如果i小于-128或者大于等于128，就创建一个Integer对象，否则执行<code>SMALL_VALUES[i+128]</code><br>首先我们来看看Integer的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String string)</span> <span class="keyword">throws</span> NumbeFormatException </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(parseInt(string));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它里面定义了一个value变量，创建一个Integer对象，就会给这个变量初始化。第二个传入的是一个String变量，它会先把它转换成一个int值，<br>下面看看<code>SMALL_VALUES[i+128]</code>是什么东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] SMALL_VALUES = <span class="keyword">new</span> Integer[<span class="number">256</span>];</span><br></pre></td></tr></table></figure><p>它是一个静态的integer数组对象，也就是说最终valueOf返回的都是一个Integer对象。<br>所以我们这里可以总结一点：<br><u>装箱的过程会创建对应的对象，这个会消耗内存，所以装箱的过程会增加内存的消耗，影响内存。</u></p></li><li><p>接着看看intValue函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很简单，直接返回value值即可。</p></li></ol><h3 id="二、-相关问题"><a href="#二、-相关问题" class="headerlink" title="二、 相关问题"></a>二、 相关问题</h3><p>上面我们看到在Integer的构造函数中，它分为两种情况：</p><ol><li>i &gt;= 128 || i &lt; -128 =====&gt; new Integer(i)</li><li>i &lt; 128 &amp;&amp; i &gt;= -128 ====&gt; SMALL_VALUES[i + 128]<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] SMALL_VALUES = <span class="keyword">new</span> Integer[<span class="number">256</span>];</span><br></pre></td></tr></table></figure>SMALL_VALUES本来已经被创建好，也就是说在i &gt;= 128 || i &lt; -128时会创建不同的对象， 在i &lt; 128 &amp;&amp; i &gt;= -128 会根据i的值返回已经创建好的指定的对象。</li></ol><p>说这些可能还不是很明白，下面我们来举个例子吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span> </span>&#123;</span><br><span class="line">    Integer i1 = <span class="number">100</span>;</span><br><span class="line">    Integer i2 = <span class="number">100</span>;</span><br><span class="line">    Integer i3 = <span class="number">200</span>;</span><br><span class="line">    Integer i4 = <span class="number">200</span>;</span><br><span class="line">    System.out.println(i1 == i2);  <span class="comment">//true</span></span><br><span class="line">    System.out.println(i3 == i4);  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码的后面，我们可以看到它们的执行结果是不一样的，为什么。再看看我们上面的说明。</p><ol><li>i1和i2会进行自动装箱，执行了valueOf函数，它们的值在[-128, 127]这个范围内，它们会拿到SMALL_VALUES数组里面的同一个对象SMALL_VALUES[228], 它们引用到了同一个Integer对象，所以它们肯定是相等的。</li><li>i3和i4也会自动装箱，执行了valueOf函数，它们的值大于127，所以会执行new Integer(200)，也就是说它们会分别创建两个不同的对象，所以它们肯定不等。<br>下面我们来看看另外一个例子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span> </span>&#123;</span><br><span class="line">    Double i1 = <span class="number">100.0</span>;</span><br><span class="line">    Double i2 = <span class="number">100.0</span>;</span><br><span class="line">    Double i3 = <span class="number">200.0</span>;</span><br><span class="line">    Double i4 = <span class="number">200.0</span>;</span><br><span class="line">    System.out.println(i1==i2); <span class="comment">//false</span></span><br><span class="line">    System.out.println(i3==i4); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>看看上面的执行结果，跟Integer 不一样，这样也不必奇怪，因为它们的valueOf实现不一样，结果肯定也不一样，那为什么它们不统一一下呢？<br>这个很好理解，因为对于Integer， 在[-128, 127]之间只有固定的256个值，所以为了避免多次创建对象，我们事先先创建好一个大小为256的Integer数组SMALL_VALUES, 所以如果值在这个范围内，就可以直接返回我们事先创建好的对象就可以了。</li></ol><p>但是对于Double类型来说，我们就不能这么做，因为它在这个范围内个数是无限的。<br>总结一句就是：<u>在某个范围内的整型数值的个数是有限的，而浮点数却不是。</u></p><p>所以在Double里面的做法很直接，就是直接创建一个对象所以每次创建的对象都不一样。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>下面我们进行一个归类：<br>Integer派别：Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。<br>Double派别：Double、Float的valueOf方法的实现是类似的。每次都返回不同的对象。<br>下面对Integer派别进行一个总结，如下图：</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">相同对象范围</th><th style="text-align:left">不同对象范围</th></tr></thead><tbody><tr><td style="text-align:left">Integer</td><td style="text-align:left">[-128, 128)</td><td style="text-align:left">i &gt;= 128 &#124;&#124; i &lt; -127</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">[-128, 128)</td><td style="text-align:left">s &gt;= 128 &#124;&#124; i &lt; -127</td></tr><tr><td style="text-align:left">Integer</td><td style="text-align:left">c &lt;  128</td><td style="text-align:left">c &gt;= 128</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">[-128, 128)</td><td style="text-align:left">v &gt;= 128 &#124;&#124; i &lt; -127</td></tr></tbody></table></div><p>下面我们来看一看另外一种情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class=